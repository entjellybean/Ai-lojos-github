package agent;
import lejos.hardware.Button;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.Motor;
import lejos.hardware.motor.NXTRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.port.SensorPort;
import lejos.utility.Delay;
import action.Deplacement;
import action.Pince;
import perception.BoutonConsole;
import perception.ColorSensor;
import perception.MoveScan;

public class MainClass {
	private Deplacement mouvementRobot;
	private Pince pince;
	private ColorSensor colorSensor;
	private BoutonConsole boutonConsole;
	private MoveScan moveScan;
	private boolean isFirstPalletPicked = false;
	private boolean isSecondPalletPicked = false;
	private int positionRobotEnFace;

	public MainClass() {
    	Port A = LocalEV3.get().getPort("A");
    	Port B = LocalEV3.get().getPort("B");
    	Port C = LocalEV3.get().getPort("C");
    	Port s2 = LocalEV3.get().getPort("S2");
    	Port s3 = LocalEV3.get().getPort("S3");
    	Port s4 = LocalEV3.get().getPort("S4");
    	
				
		mouvementRobot = new Deplacement(motorA,motorC);
		colorSensor = new ColorSensor(s4);
		boutonConsole = new BoutonConsole();
		moveScan = new MoveScan(mouvementRobot,s2); 
		pince = new Pince(B,s3);
		
	}

	public static void main(String[] args) {
		MainClass robot = new MainClass();
		robot.start();
	}

	public void start() {
		//System.out.println("wait...");
		/*positionRobotEnFace = boutonConsole.positionRobot();

		while (Button.ESCAPE.isUp()) {
			if (!isFirstPalletPicked) {
				mouvementRobot.avancerVers1erPalet();
				if (truetakePallet()) {
					mouvementRobot.pivoterDroite(90);
					mouvementRobot.avancerDe(24);
					mouvementRobot.pivoterGauche(90);
					goToWhiteLineAndDrop();
					isFirstPalletPicked = true;
				}
				pince.lacher();
			} else if(!isSecondPalletPicked) {
				goToSecondPalletAndPick();
				isSecondPalletPicked = true;
			} else{
				searchAndCollectNextPallet();
			}
		}*/
		//mouvementRobot.avancerContinu();
		detectObstacle();
		//System.out.println(positionRobotEnFace);
		//System.out.println(colorSensor.detecteLigneBlanche());
		System.out.println("stop.");
		Delay.msDelay(2000);
		cleanup();
	}

	private boolean takePallet() { 
		// c'est la pince qu'il faut utiliser pour utiliser la méthode récupérer palet
		//return pince.recupererPalet();
		return false;
	}

	private void goToWhiteLineAndDrop() {
		mouvementRobot.avancerContinu(true);
		boolean res = false;
		System.out.println("Is moving : "+mouvementRobot.isMoving());
		while (mouvementRobot.isMoving() && !res) { //regarder quand ça s'arrête
			//mouvementRobot.avancerContinu();
			res= colorSensor.detecteLigneBlanche();
			System.out.println(res);
			if (detectObstacle()) { 
				eviterObstacle();
			}
		}
		mouvementRobot.stop();
		//pince.lacherPalet();
		Delay.msDelay(2000);
		
	}



	private void goToSecondPalletAndPick() {

		//on suppose qu'on est au milieu du rectangle
		//s'orienter vers le palet qui n'a pas bougé en fonction de "position"
		if (positionRobotEnFace == 0) {
			//si le robot est à gauche
			//-(90+61,846)=-151,846
			mouvementRobot.pivoterGauche(151);
			mouvementRobot.setOrientation(-151);

		} else if (positionRobotEnFace == 1) {
			//si le robot est au milieu
			//(90+61,846)=151,846
			mouvementRobot.pivoterDroite(151);
			mouvementRobot.setOrientation(151);
		} else if (positionRobotEnFace == 2) {
			//si le robot est à droite
			//(90+61,846)=151,846
			mouvementRobot.pivoterGauche(151);
			mouvementRobot.setOrientation(-151);
		}
		//aller vers le palet
		mouvementRobot.avancerDe(62);
		takePallet();

		//aller à la ligne blanche
		if (positionRobotEnFace == 0) {
			//si le robot est à gauche
			//-(90+61,846)=-151,846
			mouvementRobot.pivoterDroite(151);
			mouvementRobot.setOrientation(0);

		} else if (positionRobotEnFace == 1) {
			//si le robot est au milieu
			//(90+61,846)=151,846
			mouvementRobot.pivoterGauche(151);
			mouvementRobot.setOrientation(0);
		} else if (positionRobotEnFace == 2) {
			//si le robot est à droite
			//(90+61,846)=151,846
			mouvementRobot.pivoterDroite(151);
			mouvementRobot.setOrientation(0);
		}
		mouvementRobot.avancerDe(56);
		while(!colorSensor.detecteLigneBlanche()){
			mouvementRobot.avancerDe(1);
		}
		//pince.lacherPalet();

	}

	private void searchAndCollectNextPallet() {
         while (Button.ESCAPE.isUp()) { 
	      mouvementRobot.pivoterGauche(180);
              mouvementRobot.avancerDe(50);
               moveScan.moveWhile();
               recupererPalet();
             mouvementRobot.orianterVersLigneAdverse();
               goToWhiteLineAndDrop();
              
              
			if (detectObstacle()) { 
				eviterObstacle();
			}
           cleanup();
      
	}


	private boolean detectObstacle() { // tester la classe + changer la méthode pour avoir la distance en face
		if (moveScan.getCurrentDistance()>=25){
			return false;
		}
		return true;
		//return false;
	}

	private void eviterObstacle() {
		//à vérifier si on détecte le mur
		boolean b = true;
		int cpt=0;
		float distanceObstacle = moveScan.getCurrentDistance();
		while(b){
			mouvementRobot.pivoterDroite(10);
			cpt+=10;
			if (!detectObstacle()){
				b = false;
			}
		}
		int avancer = (int) Math.sqrt(Math.pow(distanceObstacle,2)+225);
		mouvementRobot.avancerDe(avancer);
		mouvementRobot.pivoterGauche(cpt);
		mouvementRobot.avancerDe(avancer);

		 
	}

	private void cleanup() {
		mouvementRobot.stop();
		moveScan.close();
		colorSensor.close(); //créer la méthode close() pour colorSensor
		//pince.close();
	}
}
