package agent;
import lejos.hardware.Button;


import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.motor.Motor;
import lejos.hardware.motor.NXTRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.port.SensorPort;
import lejos.utility.Delay;
import action.Deplacement;
import action.Pince;
import perception.BoutonConsole;
import perception.ColorSensor;
import perception.MoveScan;

public class MainClass {
	private Deplacement mouvementRobot;
	private Pince pince;
	private ColorSensor colorSensor;
	private BoutonConsole boutonConsole;
	private MoveScan moveScan;
	private boolean isFirstPalletPicked = false;
	private boolean isSecondPalletPicked = false;
	private int positionRobotEnFace;

	public MainClass() {
		Port A = LocalEV3.get().getPort("A");
		Port B = LocalEV3.get().getPort("B");
		Port C = LocalEV3.get().getPort("C");
		Port D = LocalEV3.get().getPort("D");
		Port s1 = LocalEV3.get().getPort("S1");
		//Port s2 = LocalEV3.get().getPort("S2");
		Port s3 = LocalEV3.get().getPort("S3");
		Port s4 = LocalEV3.get().getPort("S4");


		mouvementRobot = new Deplacement(A,C);
		colorSensor = new ColorSensor(s4);
		boutonConsole = new BoutonConsole();
		moveScan = new MoveScan(mouvementRobot,s1); 
		pince = new Pince(D,s3);

	}

	public static void main(String[] args) {
		MainClass robot = new MainClass();
		robot.start();
	}

	public void start() {
		//System.out.println("wait...");
		//positionRobotEnFace = boutonConsole.positionRobot();

		//mouvementRobot.avancerDe(50);//à supprimer
		//pince.fermer(1800);//à supprimer
		//pince.ouvrir(1500);//à supprimer

		/*while (Button.ESCAPE.isUp()) {
			if (!isFirstPalletPicked) {
				mouvementRobot.avancerVers1erPalet();
				if (pince.recupererPalet()) {
					mouvementRobot.pivoterDroite(90);
					mouvementRobot.avancerDe(26);
					mouvementRobot.pivoterGauche(90);//compenser angle robot
					goToWhiteLineAndDrop1erPalet();
					isFirstPalletPicked = true;
				}
			} else if(!isSecondPalletPicked) {
				goToSecondPalletAndPick();
				isSecondPalletPicked = true;
			} else{
				searchAndCollectNextPallet();
			}
		}*/
		//mouvementRobot.avancerDe(100,true);
		//System.out.println(detectObstacle());
		
		//Delay.msDelay(2000);
		//searchAndCollectNextPallet();
		
		//goToWhiteLineAndDrop();
		moveScan.RechercheEtOrientation();
		Delay.msDelay(10000);
		//System.out.println(moveScan.getDistance());
		//System.out.println(detectObstacle());
		//Delay.msDelay(2000);
		//mouvementRobot.avancerDe(moveScan.getDistance());
		//moveScan.moveForward();
		//mouvementRobot.avancerContinu();
		//goToWhiteLineAndDrop();
		//System.out.println(detectObstacle());
		//System.out.println(colorSensor.detecteLigneBlanche());
		System.out.println("stop.");
		//Delay.msDelay(2000);
		cleanup();
	}

	private void goToWhiteLineAndDrop() {
		mouvementRobot.avancerContinu(true);
		boolean res = false;
		System.out.println("Is moving : "+mouvementRobot.isMoving());
		while (mouvementRobot.isMoving() && !res) { //regarder quand ça s'arrête
			res= colorSensor.detecteLigneBlanche();
			System.out.println(res);
			if (detectObstacle()) { 
				eviterObstacle();
			}
		}
		mouvementRobot.stop();
		pince.lacherPalet();    
		// Reculer après avoir déposé le palet
	    mouvementRobot.reculerDe(20); // Recule de 20 cm (ajustez la distance si nécessaire)
	    System.out.println("Recul après dépôt.");

	    // Fermer la pince après le recul
	    pince.recupererPalet();
	    System.out.println("Pince fermée.");

	}
	
	private void goToWhiteLineAndDrop1erPalet() {
		mouvementRobot.avancerContinu(true);
		boolean res = false;
		System.out.println("Is moving : "+mouvementRobot.isMoving());
		while (mouvementRobot.isMoving() && !res) { //regarder quand ça s'arrête
			res= colorSensor.detecteLigneBlanche();
			System.out.println(res);
		}
		mouvementRobot.stop();
		pince.lacherPalet();                    
		Delay.msDelay(2000);

	}



	private void goToSecondPalletAndPick() {

		//on suppose qu'on est au milieu du rectangle
		//s'orienter vers le palet qui n'a pas bougé en fonction de "position"
		if (positionRobotEnFace == 0) {
			//si le robot est à gauche
			//-(90+61,846)=-151,846
			mouvementRobot.pivoterGauche(151);
			mouvementRobot.setOrientation(-151);

		} else if (positionRobotEnFace == 1) {
			//si le robot est au milieu
			//(90+61,846)=151,846
			mouvementRobot.pivoterDroite(151);
			mouvementRobot.setOrientation(151);
		} else if (positionRobotEnFace == 2) {
			//si le robot est à droite
			//(90+61,846)=151,846
			mouvementRobot.pivoterGauche(151);
			mouvementRobot.setOrientation(-151);
		}
		//aller vers le palet
		mouvementRobot.avancerDe(48);
		pince.recupererPalet();

		//aller à la ligne blanche
		if (positionRobotEnFace == 0) {
			//si le robot est à gauche
			//-(90+61,846)=-151,846
			mouvementRobot.pivoterDroite(151);
			mouvementRobot.setOrientation(0);

		} else if (positionRobotEnFace == 1) {
			//si le robot est au milieu
			//(90+61,846)=151,846
			mouvementRobot.pivoterGauche(151);
			mouvementRobot.setOrientation(0);
		} else if (positionRobotEnFace == 2) {
			//si le robot est à droite
			//(90+61,846)=151,846
			mouvementRobot.pivoterDroite(151);
			mouvementRobot.setOrientation(0);
		}
		mouvementRobot.avancerContinu(true);
		boolean res = colorSensor.detecteLigneBlanche();
		while(!res){
			res = colorSensor.detecteLigneBlanche();
			System.out.println(res);
		}
		mouvementRobot.stop();
		pince.lacherPalet();
	}

	private void searchAndCollectNextPallet() {

		//Faire un 360 pour détecter un palet

		/*if(){
//Si on ne trouve pas de palet
}*/ 
		mouvementRobot.pivoterGauche(180);
		mouvementRobot.avancerDe(120);
		moveScan.RechercheEtOrientation();
		pince.recupererPalet();
		mouvementRobot.orienterVersLigneAdverse();
		goToWhiteLineAndDrop();
	}


	private boolean detectObstacle() { // tester la classe + changer la méthode pour avoir la distance en face
		if (moveScan.getDistance()>=25){
			return false;
		}
		return true;
		//return false;
	}

	private void eviterObstacle() {
		//à vérifier si on détecte le mur
		double distanceCentre = moveScan.getDistance();
		mouvementRobot.pivoterGauche(30);
		double distanceGauche = moveScan.getDistance();
		mouvementRobot.pivoterDroite(30);
		double distanceDroite = moveScan.getDistance();
		
		double tolerance = 10;
		
		if(distanceCentre - tolerance <= distanceGauche
				&& distanceGauche <= distanceCentre + tolerance &&
				distanceCentre - tolerance <= distanceDroite
				&& distanceDroite <= distanceCentre + tolerance) {
			//Si c'est vrai, c'est un mur, on va l'éviter à 90 degrés
			mouvementRobot.pivoterDroite(90);
		} else {
			//si c'est un robot
			boolean b = true;
			int cpt=30;
			mouvementRobot.pivoterDroite(30);
			while(b){
				mouvementRobot.pivoterDroite(10);
				cpt+=10;
				if (detectObstacle()){
					b = false;
				}
			}
			int avancer = (int) Math.sqrt(Math.pow(distanceCentre,2)+225) + 20;
			mouvementRobot.avancerDe(avancer);
			mouvementRobot.pivoterGauche(cpt);
			//mouvementRobot.avancerDe(avancer);
		}
		
		


	}

	private void cleanup() {
		mouvementRobot.stop();
		moveScan.close();
		colorSensor.close(); //créer la méthode close() pour colorSensor
		//pince.close();
	}
}
